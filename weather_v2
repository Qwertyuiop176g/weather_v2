import requests
from datetime import datetime

def get_coordinates(location, api_key):
    """Fetch latitude and longitude for a given location using OpenCage API."""
    geocode_url = f"https://api.opencagedata.com/geocode/v1/json?q={location}&key={api_key}"
    response = requests.get(geocode_url)
    data = response.json()

    if data['results']:
        coords = data['results'][0]['geometry']
        return coords['lat'], coords['lng']
    else:
        raise ValueError("Location not found!")

def get_weather_data(latitude, longitude, aqi):
    """Fetch weather data from WeatherAPI including air quality if requested."""
    weather_url = (f"http://api.weatherapi.com/v1/forecast.json"
                   f"?key=your_actual_weatherapi_key"  # Replace with your actual WeatherAPI key
                   f"&q={latitude},{longitude}"
                   f"&days=1"  # Fetching forecast for 1 day
                   f"&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m,air_quality"  # Ensure air_quality is included
                   f"{'&aqi=yes' if aqi else '&aqi=no'}")
    
    print(f"Fetching weather data from URL: {weather_url}")  # Debugging line

    response = requests.get(weather_url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: Unable to fetch data. Status code: {response.status_code}")
        print(f"Response content: {response.text}")  # Print error details
        return None

def get_aqi_description(index):
    """Return a description for the given US EPA index."""
    descriptions = {
        1: "Good",
        2: "Moderate",
        3: "Unhealthy for Sensitive Groups",
        4: "Unhealthy",
        5: "Very Unhealthy",
        6: "Hazardous"
    }
    return descriptions.get(index, "Unknown")

def display_weather_data(weather_data, include_air_quality):
    """Display weather data including air quality if requested."""
    if not weather_data:
        return
    
    # Get current time from the computer
    current_time = datetime.now()

    # Display current weather
    current = weather_data['current']
    print("\nCurrent Weather:")
    print(f"Temperature: {current['temp_c']}°C")
    print(f"Wind Speed: {current['wind_kph']} km/h")

    if include_air_quality and 'air_quality' in current:
        # Air Quality Data
        aqi = current['air_quality']
        print("\nAir Quality:")
        print(f"Carbon Monoxide (CO): {aqi.get('co', 'N/A')} μg/m3")
        print(f"Ozone (O3): {aqi.get('o3', 'N/A')} μg/m3")
        print(f"Nitrogen Dioxide (NO2): {aqi.get('no2', 'N/A')} μg/m3")
        print(f"Sulphur Dioxide (SO2): {aqi.get('so2', 'N/A')} μg/m3")
        print(f"PM2.5: {aqi.get('pm2_5', 'N/A')} μg/m3")
        print(f"PM10: {aqi.get('pm10', 'N/A')} μg/m3")
        us_epa_index = aqi.get('us-epa-index', 'N/A')
        print(f"US EPA Index: {us_epa_index} ({get_aqi_description(int(us_epa_index))})")

    # Prepare and display hourly forecast data
    hourly_times = weather_data['forecast']['forecastday'][0]['hour']
    print("\nHourly Forecast (next 24 hours):")
    print("Hour | Temperature (°C) | Relative Humidity (%) | Wind Speed (km/h)")

    for hour in hourly_times[:24]:  # Display data for the next 24 hours
        hour_time = datetime.fromisoformat(hour['time'].replace('Z', '+00:00'))
        hour_label = hour_time.strftime("%H:%M")
        temp = hour['temp_c']
        humidity = hour['humidity']
        wind_speed = hour['wind_kph']
        print(f"{hour_label:>4} | {temp:>16} | {humidity:>21} | {wind_speed:>11}")

def main():
    location = input("Enter the location: ").strip()
    opencage_api_key = "your_opencage_api_key_here"  # Replace with your OpenCage API key
    include_air_quality = input("Do you want to include air quality data? (yes/no): ").strip().lower() == 'yes'
    
    try:
        latitude, longitude = get_coordinates(location, opencage_api_key)
        print(f"Coordinates for {location}: Latitude {latitude}, Longitude {longitude}")
        
        weather_data = get_weather_data(latitude, longitude, include_air_quality)
        if weather_data:
            display_weather_data(weather_data, include_air_quality)
    except ValueError as e:
        print(e)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()
